# Development and build stage
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy shared package first
COPY shared/ ../shared/
RUN cd ../shared && npm ci && npm run build

# Copy admin-frontend package files
COPY admin-frontend/package*.json ./

# Install dependencies
RUN npm ci

# Copy admin-frontend source code
COPY admin-frontend/ .

# Expose port for development
EXPOSE 5173

# For development mode, this stage can be used to run dev server
# Build the application (for production stage)
RUN npm run build

# Production stage - use nginx for serving static files
FROM nginx:alpine AS production

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Copy built assets from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy custom nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Create nginx user
RUN addgroup -g 1001 -S nginx-group && \
    adduser -S nginx-user -u 1001 -G nginx-group

# Set proper permissions
RUN chown -R nginx-user:nginx-group /usr/share/nginx/html && \
    chown -R nginx-user:nginx-group /var/cache/nginx && \
    chown -R nginx-user:nginx-group /var/log/nginx && \
    chown -R nginx-user:nginx-group /etc/nginx/conf.d

# Switch to non-root user
USER nginx-user

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:80/ || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start nginx
CMD ["nginx", "-g", "daemon off;"]